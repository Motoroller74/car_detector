import cv2
import pytesseract
import csv
import matplotlib.pyplot as plt 
from datetime import datetime, timedelta
import os
import shutil
from time import sleep

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
PLATES_CSV = "plates.csv"
LOGS_DIR = "logs"
PHOTOS_DIR = "photos"    # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ –¥–∞—Ç–∞–º
PHOTO_MAX_DAYS = 14      # –£–¥–∞–ª—è—Ç—å —Ñ–æ—Ç–æ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π

# ===== –§–£–ù–ö–¶–ò–ò =====
def load_allowed_plates():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ CSV-—Ñ–∞–π–ª–∞."""
    plates = []
    try:
        with open(PLATES_CSV, "r", encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                plates.append({
                    "–Ω–æ–º–µ—Ä": row["–ù–æ–º–µ—Ä"].strip(),
                    "–º–æ–¥–µ–ª—å": row["–ú–æ–¥–µ–ª—å"].strip(),
                    "–≤–ª–∞–¥–µ–ª–µ—Ü": row["–í–ª–∞–¥–µ–ª–µ—Ü"].strip()
                })
        print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:", plates)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return plates
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {PLATES_CSV} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except KeyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ CSV: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {e}")
        return []

def log_event(status, plate_info=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–∞–º."""
    today = datetime.now().strftime("%Y-%m-%d")
    log_file = f"{LOGS_DIR}/{status.lower()}_{today}.log"
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_data = {
        "–≤—Ä–µ–º—è": timestamp,
        "–Ω–æ–º–µ—Ä": plate_info["–Ω–æ–º–µ—Ä"] if plate_info else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω",
        "–º–æ–¥–µ–ª—å": plate_info.get("–º–æ–¥–µ–ª—å", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if plate_info else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "–≤–ª–∞–¥–µ–ª–µ—Ü": plate_info.get("–≤–ª–∞–¥–µ–ª–µ—Ü", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if plate_info else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "—Å—Ç–∞—Ç—É—Å": status
    }
    
    with open(log_file, "a") as file:
        file.write(f"{log_data}\n")

def save_photo(image):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ."""
    today = datetime.now().strftime("%Y-%m-%d")
    date_dir = os.path.join(PHOTOS_DIR, today)
    os.makedirs(date_dir, exist_ok=True)
    
    filename = f"{datetime.now().strftime("%Y-%m-%d-%H-%M-%S")}.jpg"
    filepath = os.path.join(date_dir, filename)
    cv2.imwrite(filepath, image)
    return filepath

def cleanup_old_photos(max_days=PHOTO_MAX_DAYS):
    """–£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ —Å—Ç–∞—Ä—à–µ max_days –¥–Ω–µ–π."""
    now = datetime.now()
    cutoff_date = now - timedelta(days=max_days)
    
    if not os.path.exists(PHOTOS_DIR):
        return
    
    for dir_name in os.listdir(PHOTOS_DIR):
        dir_path = os.path.join(PHOTOS_DIR, dir_name)
        if os.path.isdir(dir_path):
            try:
                dir_date = datetime.strptime(dir_name, "%Y-%m-%d")
                if dir_date < cutoff_date:
                    shutil.rmtree(dir_path)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞: {dir_path}")
            except ValueError:
                continue

def capture_and_process_plate():
    """–î–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä."""
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        log_event("–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã")
        return None
    
    print("–ù–∞–∂–º–∏—Ç–µ 's' —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ, 'q' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...")
    while True:
        ret, frame = cap.read()
        if not ret:
            log_event("–û—à–∏–±–∫–∞ —Å—ä–µ–º–∫–∏")
            break
        
        cv2.imshow("–ö–∞–º–µ—Ä–∞ (–ù–∞–∂–º–∏—Ç–µ 's' –¥–ª—è —Å–Ω–∏–º–∫–∞)", frame)
        
        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):  # –ö–ª–∞–≤–∏—à–∞ 's' –¥–ª—è —Å–Ω–∏–º–∫–∞
            photo_path = save_photo(frame)
            print(f"üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {photo_path}")
            cap.release()
            cv2.destroyAllWindows()
            plate_number = recognize_plate(frame, photo_path)
            if plate_number:
                return plate_number
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä!")
        
        elif key == ord('q'):  # –ö–ª–∞–≤–∏—à–∞ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞
            cap.release()
            cv2.destroyAllWindows()
            return None
    
    cap.release()
    cv2.destroyAllWindows()
    return None

def open_img(img_path):
    carplate_img = cv2.imread(img_path)
    carplate_img = cv2.cvtColor(carplate_img, cv2.COLOR_BGR2RGB)
    #plt.axis('off')
    #plt.imshow(carplate_img)
    # plt.show()

    return carplate_img


def carplate_extract(image, carplate_haar_cascade):
    carplate_rects = carplate_haar_cascade.detectMultiScale(image, scaleFactor=1.1, minNeighbors=6)

    for x, y, w, h in carplate_rects:
        carplate_img = image[y+15:y+h-10, x+15:x+w-20]

    return carplate_img


def enlarge_img(image, scale_percent):
    width = int(image.shape[1] * scale_percent / 100)
    height = int(image.shape[0] * scale_percent / 100)
    dim = (width, height)
    #plt.axis('off')
    resized_image = cv2.resize(image, dim, interpolation = cv2.INTER_AREA)

    return resized_image


def recognize_plate(image, image_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    print(image_path)
    try:
        carplate_img_rgb = open_img(image_path)
        carplate_haar_cascade = cv2.CascadeClassifier('haarcascade_russian_plate_number.xml')

        carplate_extract_img = carplate_extract(carplate_img_rgb, carplate_haar_cascade)
        carplate_extract_img = enlarge_img(carplate_extract_img, 250)
        # plt.imshow(carplate_extract_img)
        # plt.show()

        carplate_extract_img_gray = cv2.cvtColor(carplate_extract_img, cv2.COLOR_RGB2GRAY)
        # plt.axis('off')
        # plt.imshow(carplate_extract_img_gray, cmap='gray')
        # plt.show()

        plate_text = pytesseract.image_to_string(
            carplate_extract_img_gray,
            config='--psm 6 --oem 3 -c tessedit_char_whitelist=ABEKMHOPCTYX0123456789')

        if plate_text:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
            plate_list = list(plate_text)
            
            for i, w in enumerate(plate_list):
                if i in [0, 4, 5] and w == '0':  # –ë—É–∫–≤–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (A, E, K, M, H, O, P, C, T, Y, X)
                    plate_list[i] = 'O'
                elif i in [1, 2, 3, 6, 7] and w == 'O':  # –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    plate_list[i] = '0'
        
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã
            plate_text = ''.join(plate_list).strip()
        return plate_text.replace(" ","") if plate_text else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return None

# ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====
ALLOWED_PLATES = load_allowed_plates()
os.makedirs(LOGS_DIR, exist_ok=True)
os.makedirs(PHOTOS_DIR, exist_ok=True)
cleanup_old_photos()  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# ===== –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ =====
try:
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞...")
    while True:
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        plate_number = capture_and_process_plate()
        
        if plate_number:
            print(f"üîç –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä: {plate_number}")
            plate_info = next(
                (p for p in ALLOWED_PLATES if p["–Ω–æ–º–µ—Ä"] == plate_number),
                None
            )
            
            if plate_info:
                log_event("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", plate_info)
                print(f"üü¢ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: {plate_info['–º–æ–¥–µ–ª—å']} ({plate_info['–≤–ª–∞–¥–µ–ª–µ—Ü']})")
                print("[–®–ª–∞–≥–±–∞—É–º –æ—Ç–∫—Ä—ã—Ç]")  # –í–º–µ—Å—Ç–æ GPIO
                sleep(2)
                print("[–®–ª–∞–≥–±–∞—É–º –∑–∞–∫—Ä—ã—Ç]")
            else:
                log_event("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", {"–Ω–æ–º–µ—Ä": plate_number})
                print("üî¥ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
        
except KeyboardInterrupt:
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
finally:
    cv2.destroyAllWindows()
    
    