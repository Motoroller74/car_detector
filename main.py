import cv2
import pytesseract
import RPi.GPIO as GPIO
import csv
from datetime import datetime, timedelta
import os
import shutil
from time import sleep

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
RELAY_PIN = 17           # GPIO –¥–ª—è —Ä–µ–ª–µ/—à–ª–∞–≥–±–∞—É–º–∞
PIR_PIN = 4              # GPIO –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è (PIR)
PLATES_CSV = "plates.csv"
LOGS_DIR = "logs"
PHOTOS_DIR = "photos"    # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ –¥–∞—Ç–∞–º
PHOTO_MAX_DAYS = 14      # –£–¥–∞–ª—è—Ç—å —Ñ–æ—Ç–æ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GPIO =====
GPIO.setmode(GPIO.BCM)
GPIO.setup(RELAY_PIN, GPIO.OUT)
GPIO.setup(PIR_PIN, GPIO.IN)

# ===== –§–£–ù–ö–¶–ò–ò =====
def load_allowed_plates():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ CSV-—Ñ–∞–π–ª–∞."""
    plates = []
    try:
        with open(PLATES_CSV, "r") as file:
            reader = csv.DictReader(file)
            for row in reader:
                plates.append({
                    "–Ω–æ–º–µ—Ä": row["–ù–æ–º–µ—Ä"].strip(),
                    "–º–æ–¥–µ–ª—å": row.get("–ú–æ–¥–µ–ª—å", "").strip(),
                    "–≤–ª–∞–¥–µ–ª–µ—Ü": row.get("–í–ª–∞–¥–µ–ª–µ—Ü", "").strip()
                })
        return plates
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {PLATES_CSV} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []

def log_event(status, plate_info=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–∞–º."""
    today = datetime.now().strftime("%Y-%m-%d")
    log_file = f"{LOGS_DIR}/{status.lower()}_{today}.log"
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_data = {
        "–≤—Ä–µ–º—è": timestamp,
        "–Ω–æ–º–µ—Ä": plate_info["–Ω–æ–º–µ—Ä"] if plate_info else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω",
        "–º–æ–¥–µ–ª—å": plate_info.get("–º–æ–¥–µ–ª—å", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if plate_info else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "–≤–ª–∞–¥–µ–ª–µ—Ü": plate_info.get("–≤–ª–∞–¥–µ–ª–µ—Ü", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if plate_info else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "—Å—Ç–∞—Ç—É—Å": status
    }
    
    with open(log_file, "a") as file:
        file.write(f"{log_data}\n")

def save_photo(image, plate_number):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ."""
    today = datetime.now().strftime("%Y-%m-%d")
    date_dir = os.path.join(PHOTOS_DIR, today)
    os.makedirs(date_dir, exist_ok=True)
    
    filename = f"{plate_number}_{datetime.now().strftime('%H%M%S')}.jpg"
    filepath = os.path.join(date_dir, filename)
    cv2.imwrite(filepath, image)
    return filepath

def cleanup_old_photos(max_days=PHOTO_MAX_DAYS):
    """–£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ —Å—Ç–∞—Ä—à–µ max_days –¥–Ω–µ–π."""
    now = datetime.now()
    cutoff_date = now - timedelta(days=max_days)
    
    for dir_name in os.listdir(PHOTOS_DIR):
        dir_path = os.path.join(PHOTOS_DIR, dir_name)
        if os.path.isdir(dir_path):
            dir_date = datetime.strptime(dir_name, "%Y-%m-%d")
            if dir_date < cutoff_date:
                shutil.rmtree(dir_path)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞: {dir_path}")

def capture_and_process_plate():
    """–î–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä."""
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        log_event("–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã")
        return None
    
    ret, frame = cap.read()
    cap.release()
    
    if not ret:
        log_event("–û—à–∏–±–∫–∞ —Å—ä–µ–º–∫–∏")
        return None
    
    plate_number = recognize_plate(frame)
    if plate_number:
        photo_path = save_photo(frame, plate_number)
        print(f"üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {photo_path}")
        return plate_number
    else:
        log_event("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        return None

def recognize_plate(image):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        plate_text = pytesseract.image_to_string(gray, config='--psm 8').strip()
        return plate_text if plate_text else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return None

# ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====
ALLOWED_PLATES = load_allowed_plates()
os.makedirs(LOGS_DIR, exist_ok=True)
os.makedirs(PHOTOS_DIR, exist_ok=True)
cleanup_old_photos()  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# ===== –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ =====
try:
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è...")
    while True:
        if GPIO.input(PIR_PIN):  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
            print("üöó –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–∞—à–∏–Ω–∞! –°–∫–∞–Ω–∏—Ä—É—é –Ω–æ–º–µ—Ä...")
            plate_number = capture_and_process_plate()
            
            if plate_number:
                print(f"üîç –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä: {plate_number}")
                plate_info = next(
                    (p for p in ALLOWED_PLATES if p["–Ω–æ–º–µ—Ä"] == plate_number),
                    None
                )
                
                if plate_info:
                    log_event("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", plate_info)
                    print(f"üü¢ –û—Ç–∫—Ä—ã–≤–∞—é —à–ª–∞–≥–±–∞—É–º –¥–ª—è {plate_info['–º–æ–¥–µ–ª—å']} ({plate_info['–≤–ª–∞–¥–µ–ª–µ—Ü']})")
                    GPIO.output(RELAY_PIN, GPIO.HIGH)
                    sleep(5)
                    GPIO.output(RELAY_PIN, GPIO.LOW)
                else:
                    log_event("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", {"–Ω–æ–º–µ—Ä": plate_number})
                    print("üî¥ –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
            
            sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
        sleep(0.1)

except KeyboardInterrupt:
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
finally:
    GPIO.cleanup()